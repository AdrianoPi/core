#!/usr/bin/env python3

import os
import re
import sys

instr_specs = {
    "to_substitute" : ["malloc", "free", "realloc", "calloc"],
    "substituted_suffix" : "_wrapped",
    "processed_suffix" : "_instr",
    "to_ignore" : []
}

def collection_to_c_array(coll, indent):
    indent_str = '\t' * indent
    res = '{\n'
    for s in coll:
        res += indent_str + f'"{s}",\n'
    res += indent_str + 'nullptr\n}'
    return res

def extract_function_identifiers(text):
    fnc_ident_pattern = '([A-Z][0-9A-Za-z]*)([ \t\n\r\f\v]*\()'
    res = set()
    for match in re.finditer(fnc_ident_pattern, header_str):
        res.add(match.group(1))     
    return res

copyright_str = '// file generated by a ROOT-Sim build script, all rights reserved\n'

if __name__ == '__main__':
    _, header_path, source_output = sys.argv

    with open(header_path, 'r') as f:
        header_str = f.read()
    
    instr_specs["to_ignore"] += extract_function_identifiers(header_str)

    with open(source_output, 'w') as f:
        f.write(copyright_str) # TODO do we need this?
        
        f.write('#include <instr/instr_cfg.hpp>\n\n')
        
        f.write('const char *const to_substitute[] = ') 
        f.write(collection_to_c_array(instr_specs["to_substitute"], 1))
        f.write(';\n\n')

        f.write('const char *const to_ignore[] = ') 
        f.write(collection_to_c_array(instr_specs["to_ignore"], 1))
        f.write(';\n\n')
        
        f.write('struct instr_cfg instr_cfg = {\n')
        f.write(f'\t"{instr_specs["processed_suffix"]}",\n')
        f.write(f'\t"{instr_specs["substituted_suffix"]}",\n')
        f.write('\tto_substitute,\n')
        f.write('\tto_ignore\n')
        f.write('};\n')
